{% extends "base.html.twig" %}

{% block body %}
    <div class="container">
        <h1>Create a Doctrine Entity</h1>

        {{ form_start(form, {'attr': {'id': 'entity-form'}}) }}

        <div class="form-group">
            {{ form_label(form.entityName) }}
            {{ form_widget(form.entityName) }}
            {{ form_errors(form.entityName) }}
        </div>

        <div id="property-collection">
            {% for propertyForm in form.properties %}
                <div class="property-item">
                    {{ form_row(propertyForm.propertyName) }}
                    {{ form_row(propertyForm.propertyType) }}
                    {{ form_row(propertyForm.propertyNullable) }}

                    <button type="button" class="remove-property">
                        Remove Property
                    </button>
                </div>
            {% endfor %}
        </div>

        <button type="button" id="add-property">
            Add Property
        </button>

        <div class="form-group">
            {{ form_widget(form.submit) }}
        </div>

        {{ form_end(form) }}

        {% if jsonData is not empty %}
            <div>
                <h2>Submitted Data</h2>
                <pre>{{ jsonData|json_encode(constant('JSON_PRETTY_PRINT')) }}</pre>
            </div>
        {% endif %}
    </div>

    <script>
        // Add event listener for adding new property
        document.getElementById('add-property').addEventListener('click', function() {
            const collectionHolder = document.getElementById('property-collection');
            const propertyCount = collectionHolder.children.length;

            // Create a new property item
            const newPropertyItem = document.createElement('div');
            newPropertyItem.className = 'property-item';
            newPropertyItem.dataset.index = propertyCount;

            // HTML structure for the new property fields
            newPropertyItem.innerHTML = `
                <label>Property Name</label>
                <input type="text" name="entity_generator[properties][${propertyCount}][propertyName]" />

                <label>Property Type</label>
                <select name="entity_generator[properties][${propertyCount}][propertyType]">
                    <option value="text">Text</option>
                    <option value="string">String</option>
                    <option value="integer">Integer</option>
                    <option value="boolean">Boolean</option>
                    <option value="smallint">SmallInteger</option>
                    <option value="bigint">BigInteger</option>
                    <option value="float">Float</option>
                    <option value="array">Array</option>
                    <option value="simple_array">Simple Array</option>
                    <option value="object">Object</option>
                    <option value="binary">Binary</option>
                    <option value="blob">Blob</option>
                    <option value="datetime">Date & Time</option>
                    <option value="datetime_immutable">Date & Time Immutable</option>
                    <option value="datetimetz">Date & Time TimeZone</option>
                    <option value="datetimetz_immutable">Date & Time TimeZone Immutable</option>
                    <option value="date">Date</option>
                    <option value="date_immutable">Date Immutable</option>
                </select>

                <label>
                    <input type="checkbox" name="entity_generator[properties][${propertyCount}][propertyNullable]" />
                    Nullable
                </label>

                <button type="button" class="remove-property">Remove Property</button>
            `;

            // Append the new property item to the collection
            collectionHolder.appendChild(newPropertyItem);

            // Attach remove event listener for the new property
            newPropertyItem.querySelector('.remove-property').addEventListener('click', function() {
                newPropertyItem.remove();
            });
        });

        // Attach remove event listeners for all existing property items
        document.querySelectorAll('.remove-property').forEach(function(button) {
            button.addEventListener('click', function() {
                button.closest('.property-item').remove();
            });
        });
    </script>
{% endblock %}
