import KTComponent from '../component';
import { KTMenuConfigInterface, KTMenuInterface } from './types';
import { KTMenuItemToggleType, KTMenuItemTriggerType } from './types';
import { KTOptionType } from '../../types';
declare global {
    interface Window {
        KT_MENU_INITIALIZED: boolean;
    }
}
export declare class KTMenu extends KTComponent implements KTMenuInterface {
    protected _name: string;
    protected _defaultConfig: KTMenuConfigInterface;
    protected _config: KTMenuConfigInterface;
    protected _disabled: boolean;
    constructor(element: HTMLElement, config?: KTMenuConfigInterface);
    protected _click(element: HTMLElement, event: Event): void;
    protected _link(element: HTMLElement, event: Event): void;
    protected _dismiss(element: HTMLElement): void;
    protected _mouseover(element: HTMLElement): void;
    protected _mouseout(element: HTMLElement): void;
    protected _toggle(itemElement: HTMLElement): void;
    protected _show(itemElement: HTMLElement): void;
    protected _hide(itemElement: HTMLElement): void;
    protected _reset(itemElement: HTMLElement): void;
    protected _update(): void;
    protected _updateItemSubType(itemElement: HTMLElement): void;
    protected _isItemSubShown(itemElement: HTMLElement): boolean;
    protected _isItemDropdownPermanent(itemElement: HTMLElement): boolean;
    protected _isItemParentShown(itemElement: HTMLElement): boolean;
    protected _isItemSubElement(itemElement: HTMLElement): boolean;
    protected _hasItemSub(itemElement: HTMLElement): boolean;
    protected _getItemLinkElement(itemElement: HTMLElement): HTMLElement;
    protected _getItemSubElement(itemElement: HTMLElement): HTMLElement;
    protected _getItemToggleMode(itemElement: HTMLElement): KTMenuItemToggleType;
    protected _getItemElement(element: HTMLElement): HTMLElement;
    protected _getItemParentElement(itemElement: HTMLElement): HTMLElement;
    protected _getItemParentElements(itemElement: HTMLElement): Array<HTMLElement>;
    protected _getItemChildElement(itemElement: HTMLElement): HTMLElement;
    protected _getItemChildElements(itemElement: HTMLElement): Array<HTMLElement>;
    protected _showDropdown(itemElement: HTMLElement): void;
    protected _hideDropdown(itemElement: HTMLElement): void;
    protected _initDropdownPopper(itemElement: HTMLElement, subElement: HTMLElement): void;
    protected _destroyDropdownPopper(itemElement: HTMLElement): void;
    protected _getDropdownPopperConfig(itemElement: HTMLElement): object;
    protected _showAccordion(itemElement: HTMLElement): void;
    protected _hideAccordion(itemElement: HTMLElement): void;
    protected _setActiveLink(linkElement: HTMLElement): void;
    protected _getLinkByAttribute(value: string, name?: string): HTMLElement;
    protected _hideAccordions(itemElement: HTMLElement): void;
    protected _getItemOption(element: HTMLElement, name: string): KTOptionType;
    getItemTriggerMode(itemElement: HTMLElement): KTMenuItemTriggerType;
    getItemToggleMode(element: HTMLElement): KTMenuItemToggleType;
    click(element: HTMLElement, event: Event): void;
    link(element: HTMLElement, event: Event): void;
    dismiss(element: HTMLElement): void;
    mouseover(element: HTMLElement): void;
    mouseout(element: HTMLElement): void;
    show(itemElement: HTMLElement): void;
    hide(itemElement: HTMLElement): void;
    toggle(itemElement: HTMLElement): void;
    reset(itemElement: HTMLElement): void;
    update(): void;
    setActiveLink(link: HTMLElement): void;
    getLinkByAttribute(value: string, name?: string): HTMLElement;
    getItemLinkElement(itemElement: HTMLElement): HTMLElement;
    getItemElement(element: HTMLElement): HTMLElement;
    getItemSubElement(itemElement: HTMLElement): HTMLElement;
    getItemParentElements(itemElement: HTMLElement): Array<HTMLElement> | null;
    isItemSubShown(itemElement: HTMLElement): boolean;
    isItemParentShown(itemElement: HTMLElement): boolean;
    isItemDropdownPermanent(itemElement: HTMLElement): boolean;
    disable(): void;
    enable(): void;
    hideAccordions(itemElement?: HTMLElement): void;
    static getInstance(element: HTMLElement): KTMenu;
    static getOrCreateInstance(element: HTMLElement, config?: KTMenuConfigInterface): KTMenu;
    static hide(skipElement?: HTMLElement): void;
    static updateDropdowns(): void;
    static updateByLinkAttribute(value: string, name?: string): void;
    static handleClickAway(): void;
    static findFocused(): HTMLElement;
    static getFocusLink(linkElement: HTMLElement, direction: 'next' | 'previouse', preFocus?: boolean): HTMLElement;
    static handleKeyboard(): void;
    static handleMouseover(): void;
    static handleMouseout(): void;
    static handleClick(): void;
    static handleDismiss(): void;
    static handleResize(): void;
    static initHandlers(): void;
    static createInstances(): void;
    static init(): void;
}
